I"$<p><img style="padding-right: 10px;" src="/images/reading/4_47.jpg" /></p>

<h4 id="第1章整洁代码">第1章：整洁代码</h4>
<p>读与写花费时间的比例超过10:1<br />
让营地比你来时更干净</p>

<h4 id="第2章有意义的命名">第2章：有意义的命名</h4>
<p>名副其实<br />
避免误导<br />
做有意义的区分<br />
使用读得出来的名称</p>

<h4 id="第3章函数">第3章：函数</h4>
<p>短小、更短小<br />
只做一件事：TO起头。让代码读起来像是一系列自顶向下的TO起头段落是保持抽象层级协调一致的有效技巧。<br />
最理想的参数数量是零</p>

<h4 id="第4章注释">第4章：注释</h4>
<p>注释总是一种失败</p>

<h4 id="第5章格式">第5章：格式</h4>
<p>代码格式关乎沟通，而沟通是专业开发者的头等大事。</p>

<h4 id="第6章对象和数据结构">第6章：对象和数据结构</h4>
<p>对象曝露行为，隐藏数据；数据结构曝露数据，没有明显的行为。</p>

<h4 id="第7章错误处理">第7章：错误处理</h4>
<p>如果将错误处理隔离看待，独立于主要逻辑之外，就能写出强固而整洁的代码。</p>

<h4 id="第8章边界">第8章：边界</h4>

<h4 id="第9章单元测试">第9章：单元测试</h4>

<h4 id="第10章类">第10章：类</h4>

<h4 id="第11章系统">第11章：系统</h4>

<h4 id="第12章迭进">第12章：迭进</h4>

<h4 id="第13章并发编程">第13章：并发编程</h4>

<h4 id="第14章逐步改进">第14章：逐步改进</h4>
<p>要编写整洁代码，必须先写肮脏代码，然后再清理它。</p>

<h4 id="第15章junit内幕">第15章：JUnit内幕</h4>

<h4 id="第16章重构serialdate">第16章：重构SerialDate</h4>

<h4 id="第17章味道与启发">第17章：味道与启发</h4>

:ET